import Random from "/libraries/secure-utils/random/random.js";import IqonsCatalog from"/libraries/iqons/src/js/iqons-catalog.js";export default class Iqons{static async svg(t, s=!1){const a=this._hash(t);return this._svgTemplate(a[0],a[2],a[3]+a[4],a[5]+a[6],a[7]+a[8],a[9]+a[10],a[11],a[12],s)}static async render(t, s){s.innerHTML=await this.svg(t)}static async toDataUrl(t){return`data:image/svg+xml;base64, ${btoa(await this.svg(t,!0))}`}static placeholder(t="#bbb", s=1){return`\n            <svg viewBox="0 0 160 160" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/2000/xlink" >\n                <path fill="none" stroke="${t}" stroke-width="${2*s}" transform="translate(0, 8) scale(0.5)" d="M251.6 17.34l63.53 110.03c5.72 9.9 5.72 22.1 0 32L251.6 269.4c-5.7 9.9-16.27 16-27.7 16H96.83c-11.43 0-22-6.1-27.7-16L5.6 159.37c-5.7-9.9-5.7-22.1 0-32L69.14 17.34c5.72-9.9 16.28-16 27.7-16H223.9c11.43 0 22 6.1 27.7 16z"/>\n                <g transform="scale(0.9) translate(9, 8)">\n                    <circle cx="80" cy="80" r="40" fill="none" stroke="${t}" stroke-width="${s}" opacity=".9"></circle>\n                    <g opacity=".1" fill="#010101"><path d="M119.21,80a39.46,39.46,0,0,1-67.13,28.13c10.36,2.33,36,3,49.82-14.28,10.39-12.47,8.31-33.23,4.16-43.26A39.35,39.35,0,0,1,119.21,80Z"/></g>\`\n                </g>\n            </svg>`}static renderPlaceholder(t,s=null,a=null){t.innerHTML=this.placeholder(s,a)}static placeholderToDataUrl(t=null,s=null){return`data:image/svg+xml;base64,${btoa(this.placeholder(t,s))}`}static async image(t){const s=await this.toDataUrl(t),a=await this._loadImage(s);return a.style.width="100%",a.style.height="100%",a}static async _svgTemplate(t,s,a,e,n,i,r,c,l){return this._$svg(await this._$iqons(t,s,a,e,n,i,r,l),c)}static async _$iqons(t,s,a,e,n,i,r,c){for(t=parseInt(t),s=parseInt(s),r=parseInt(r),t===s&&++t>9&&(t=0);r===t||r===s;)++r>9&&(r=0);return t=this.colors[t],s=this.colors[s],`\n            <g color="${t}" fill="${r=this.colors[r]}">\n                <rect fill="${s}" x="0" y="0" width="160" height="160"></rect>\n                <circle cx="80" cy="80" r="40" fill="${t}"></circle>\n                <g opacity=".1" fill="#010101"><path d="M119.21,80a39.46,39.46,0,0,1-67.13,28.13c10.36,2.33,36,3,49.82-14.28,10.39-12.47,8.31-33.23,4.16-43.26A39.35,39.35,0,0,1,119.21,80Z"/></g>\n                ${await this._generatePart("top",e,c)}\n                ${await this._generatePart("side",n,c)}\n                ${await this._generatePart("face",a,c)}\n                ${await this._generatePart("bottom",i,c)}\n            </g>`}static _$svg(t,s){const a=Random.getRandomId();return`\n            <svg viewBox="0 0 160 160" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/2000/xlink" >\n                <defs>\n                    <clipPath id="hexagon-clip-${a}" transform="scale(0.5) translate(0, 16)">\n                        <path d="M251.6 17.34l63.53 110.03c5.72 9.9 5.72 22.1 0 32L251.6 269.4c-5.7 9.9-16.27 16-27.7 16H96.83c-11.43 0-22-6.1-27.7-16L5.6 159.37c-5.7-9.9-5.7-22.1 0-32L69.14 17.34c5.72-9.9 16.28-16 27.7-16H223.9c11.43 0 22 6.1 27.7 16z"/>\n                    </clipPath>\n                </defs>\n                <path fill="white" stroke="#bbbbbb" transform="translate(0, 8) scale(0.5)" d="M251.6 17.34l63.53 110.03c5.72 9.9 5.72 22.1 0 32L251.6 269.4c-5.7 9.9-16.27 16-27.7 16H96.83c-11.43 0-22-6.1-27.7-16L5.6 159.37c-5.7-9.9-5.7-22.1 0-32L69.14 17.34c5.72-9.9 16.28-16 27.7-16H223.9c11.43 0 22 6.1 27.7 16z"/>\n                <g transform="scale(0.9) translate(9, 8)">\n                    <g clip-path="url(#hexagon-clip-${a})">\n                        ${t}\n                    </g>\n                </g>\n            </svg>`}static async _generatePart(t,s,a=!1){
/* @asset(/libraries/iqons/dist/iqons.min.svg) */
if(a){const a=await this._getAssets(),e="#"+t+"_"+this._assetIndex(s,t);return a.querySelector(e).innerHTML}return`<use width="160" height="160" xlink:href="/libraries/iqons/dist/iqons.min.svg#${t}_${this._assetIndex(s,t)}"/>`}static _loadImage(t){return new Promise((s,a)=>{const e=document.createElement("img");e.addEventListener("load",t=>s(e),{once:!0}),e.src=t})}static async _getAssets(){return this._assets?this._assets:(this._assets=fetch("/libraries/iqons/dist/iqons.min.svg").then(t=>t.text()).then(t=>{const s=document.createElement("x-assets");return s.innerHTML=t,this._assets=s,s}),this._assets)}static get colors(){return["#fb8c00","#d32f2f","#fbc02d","#3949ab","#03a9f4","#8e24aa","#009688","#f06292","#7cb342","#795548"]}static get assetCounts(){return{face:IqonsCatalog.face.length,side:IqonsCatalog.side.length,top:IqonsCatalog.top.length,bottom:IqonsCatalog.bottom.length,gaze:2}}static _assetIndex(t,s){return(t=Number(t)%Iqons.assetCounts[s]+1)<10&&(t="0"+t),t}static _hash(t){return(""+t.split("").map(t=>Number(t.charCodeAt(0))+3).reduce((t,s)=>t*(1-t)*this.__chaosHash(s),.5)).split("").reduce((t,s)=>s+t,"").substr(4,17)}static __chaosHash(t){let s=1/t;for(let t=0;t<100;t++)s=(1-s)*s*3.569956786876;return s}};